import os
import pandas as pd
import tkinter as tk
from tkinter import filedialog, messagebox

def compare_workbooks(source_file, target_file, output_file):
    # Load both workbooks
    reference_workbook = pd.ExcelFile(source_file)
    comparison_workbook = pd.ExcelFile(target_file)
    
    # Iterate through the sheets in the reference workbook
    with open(output_file, 'a') as f:
        for sheet_name in reference_workbook.sheet_names:
            if sheet_name in comparison_workbook.sheet_names:
                reference_df = pd.read_excel(source_file, sheet_name=sheet_name)
                comparison_df = pd.read_excel(target_file, sheet_name=sheet_name)
                
                # Compare columns and values
                for column in reference_df.columns:
                    if column in comparison_df.columns:
                        mismatches = reference_df[column] != comparison_df[column]
                        if mismatches.any():
                            for index, mismatch in mismatches.iteritems():
                                if mismatch:
                                    f.write(f"Mismatch found in File: {source_file}, Sheet: {sheet_name}, Column: {column}, Row: {index + 2}, Reference: {reference_df.loc[index, column]}, Comparison: {comparison_df.loc[index, column]}\n")
                    else:
                        f.write(f"Column '{column}' not found in Sheet '{sheet_name}' in comparison workbook\n")
            else:
                f.write(f"Sheet '{sheet_name}' not found in comparison workbook\n")

def compare_directories(source_dir, target_dir, output_file):
    # Clear the output file at the start
    open(output_file, 'w').close()

    # List all Excel files in both directories
    source_files = [f for f in os.listdir(source_dir) if f.endswith('.xlsx')]
    target_files = [f for f in os.listdir(target_dir) if f.endswith('.xlsx')]
    
    # Compare each file in source directory with corresponding file in target directory
    for source_file in source_files:
        target_file = os.path.join(target_dir, source_file)
        if source_file in target_files:
            compare_workbooks(os.path.join(source_dir, source_file), target_file, output_file)
        else:
            with open(output_file, 'a') as f:
                f.write(f"File '{source_file}' not found in target directory\n")

def select_source_directory():
    source_dir.set(filedialog.askdirectory())
    
def select_target_directory():
    target_dir.set(filedialog.askdirectory())

def select_output_file():
    output_file.set(filedialog.asksaveasfilename(defaultextension=".txt", filetypes=[("Text files", "*.txt"), ("All files", "*.*")]))

def run_comparison():
    if not source_dir.get() or not target_dir.get() or not output_file.get():
        messagebox.showerror("Error", "All fields must be selected!")
        return
    
    compare_directories(source_dir.get(), target_dir.get(), output_file.get())
    messagebox.showinfo("Done", "Comparison completed. Check the output file for results.")

# Set up the GUI
root = tk.Tk()
root.title("Excel Sheet Comparator")

source_dir = tk.StringVar()
target_dir = tk.StringVar()
output_file = tk.StringVar()

frame = tk.Frame(root, padx=10, pady=10)
frame.pack(expand=True, fill=tk.BOTH)

tk.Label(frame, text="Source Directory:").grid(row=0, column=0, sticky="e")
tk.Entry(frame, textvariable=source_dir, width=50).grid(row=0, column=1)
tk.Button(frame, text="Browse", command=select_source_directory).grid(row=0, column=2)

tk.Label(frame, text="Target Directory:").grid(row=1, column=0, sticky="e")
tk.Entry(frame, textvariable=target_dir, width=50).grid(row=1, column=1)
tk.Button(frame, text="Browse", command=select_target_directory).grid(row=1, column=2)

tk.Label(frame, text="Output File:").grid(row=2, column=0, sticky="e")
tk.Entry(frame, textvariable=output_file, width=50).grid(row=2, column=1)
tk.Button(frame, text="Browse", command=select_output_file).grid(row=2, column=2)

tk.Button(frame, text="Compare", command=run_comparison).grid(row=3, columnspan=3, pady=10)

root.mainloop()
import os
import pandas as pd
import tkinter as tk
from tkinter import filedialog, messagebox

def compare_workbooks(source_file, target_file, output_file):
    # Load both workbooks
    reference_workbook = pd.ExcelFile(source_file)
    comparison_workbook = pd.ExcelFile(target_file)
    
    # Iterate through the sheets in the reference workbook
    with open(output_file, 'a') as f:
        for sheet_name in reference_workbook.sheet_names:
            if sheet_name in comparison_workbook.sheet_names:
                reference_df = pd.read_excel(source_file, sheet_name=sheet_name)
                comparison_df = pd.read_excel(target_file, sheet_name=sheet_name)
                
                # Compare columns and values
                for column in reference_df.columns:
                    if column in comparison_df.columns:
                        mismatches = reference_df[column] != comparison_df[column]
                        if mismatches.any():
                            for index, mismatch in mismatches.iteritems():
                                if mismatch:
                                    f.write(f"Mismatch found in File: {source_file}, Sheet: {sheet_name}, Column: {column}, Row: {index + 2}, Reference: {reference_df.loc[index, column]}, Comparison: {comparison_df.loc[index, column]}\n")
                    else:
                        f.write(f"Column '{column}' not found in Sheet '{sheet_name}' in comparison workbook\n")
            else:
                f.write(f"Sheet '{sheet_name}' not found in comparison workbook\n")

def compare_directories(source_dir, target_dir, output_file):
    # Clear the output file at the start
    open(output_file, 'w').close()

    # List all Excel files in both directories
    source_files = [f for f in os.listdir(source_dir) if f.endswith('.xlsx')]
    target_files = [f for f in os.listdir(target_dir) if f.endswith('.xlsx')]
    
    # Compare each file in source directory with corresponding file in target directory
    for source_file in source_files:
        target_file = os.path.join(target_dir, source_file)
        if source_file in target_files:
            compare_workbooks(os.path.join(source_dir, source_file), target_file, output_file)
        else:
            with open(output_file, 'a') as f:
                f.write(f"File '{source_file}' not found in target directory\n")

def select_source_directory():
    source_dir.set(filedialog.askdirectory())
    
def select_target_directory():
    target_dir.set(filedialog.askdirectory())

def select_output_file():
    output_file.set(filedialog.asksaveasfilename(defaultextension=".txt", filetypes=[("Text files", "*.txt"), ("All files", "*.*")]))

def run_comparison():
    if not source_dir.get() or not target_dir.get() or not output_file.get():
        messagebox.showerror("Error", "All fields must be selected!")
        return
    
    compare_directories(source_dir.get(), target_dir.get(), output_file.get())
    messagebox.showinfo("Done", "Comparison completed. Check the output file for results.")

# Set up the GUI
root = tk.Tk()
root.title("Excel Sheet Comparator")

source_dir = tk.StringVar()
target_dir = tk.StringVar()
output_file = tk.StringVar()

frame = tk.Frame(root, padx=10, pady=10)
frame.pack(expand=True, fill=tk.BOTH)

tk.Label(frame, text="Source Directory:").grid(row=0, column=0, sticky="e")
tk.Entry(frame, textvariable=source_dir, width=50).grid(row=0, column=1)
tk.Button(frame, text="Browse", command=select_source_directory).grid(row=0, column=2)

tk.Label(frame, text="Target Directory:").grid(row=1, column=0, sticky="e")
tk.Entry(frame, textvariable=target_dir, width=50).grid(row=1, column=1)
tk.Button(frame, text="Browse", command=select_target_directory).grid(row=1, column=2)

tk.Label(frame, text="Output File:").grid(row=2, column=0, sticky="e")
tk.Entry(frame, textvariable=output_file, width=50).grid(row=2, column=1)
tk.Button(frame, text="Browse", command=select_output_file).grid(row=2, column=2)

tk.Button(frame, text="Compare", command=run_comparison).grid(row=3, columnspan=3, pady=10)

root.mainloop()
